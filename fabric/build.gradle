import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
    id("com.modrinth.minotaur")
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")
}

base {
    version = "${minecraft_version}-${version}"
    archivesName = "${mod_id_jar}-Fabric"
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

sourceSets.main.resources { srcDir project.project(':common').file('src/generated/resources/').getAbsolutePath() }

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.remapJar)
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def projectId = findProperty('curseforge_project_id')

    def mainFile = upload(projectId, tasks.remapJar.archiveFile)
    mainFile.changelog = file('../changelog.md')
    mainFile.displayName = findProperty('mod_name') + ' Fabric ' + findProperty('version')
    mainFile.releaseType = 'release'
    mainFile.addEnvironment("Client", "Server")
    mainFile.addJavaVersion("Java 21")
}

modrinth {
    token.set(System.getenv("MODRINTH_TOKEN"))
    projectId.set(findProperty('modrinth_project_id'))
    changelog.set(file('../changelog.md').text)
    versionName.set(findProperty('mod_name') + ' Fabric ' + findProperty('version'))
    versionType.set("release")
    uploadFile.set(tasks.remapJar)
    dependencies {
        required.project("fabric-api")
    }
}
tasks.modrinth.dependsOn(tasks.remapJar)