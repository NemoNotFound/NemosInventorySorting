import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id("com.modrinth.minotaur")
}

base {
    version = "${minecraft_version}-${version}"
    archivesName = "${mod_id_jar}-Forge"
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config("${mod_id}.mixins.json")
}

tasks.named("assemble").configure {
    dependsOn("jarJar")
}

jar {
    manifest {
        attributes["MixinConfigs"] = "${mod_id}.mixins.json"
    }
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir project.project(':common').file('src/generated/resources/').getAbsolutePath() }

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = 'Minecraft'
                url = uri("https://libraries.minecraft.net")
            }
        }
        filter { includeModule("org.lwjgl", "lwjgl-freetype") }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    // Forge's hack fix
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.jarJar)
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def projectId = findProperty('curseforge_project_id')

    def mainFile = upload(projectId, tasks.jarJar.archiveFile)
    mainFile.changelog = file('../changelog.md')
    mainFile.displayName = findProperty('mod_name') + ' Forge ' + findProperty('version')
    mainFile.addEnvironment("Client")
    mainFile.releaseType = 'release'
}

modrinth {
    token.set(System.getenv("MODRINTH_TOKEN"))
    projectId.set(findProperty('modrinth_project_id'))
    changelog.set(file('../changelog.md').text)
    versionName.set(findProperty('mod_name') + ' Forge ' + findProperty('version'))
    versionType.set("release")
    uploadFile.set(tasks.jarJar)
    dependencies {

    }
}
tasks.modrinth.dependsOn(tasks.jarJar)